use sakila; 

-- 1. List of number of films per category

SELECT c.name as 'category', count(f.film_id) as 'film_count'

FROM film f
INNER JOIN film_category fc
ON f.film_id = fc.film_id
INNER JOIN category c
ON c.category_id = fc.category_id
GROUP BY category
ORDER BY film_count DESC; 

-- 2. Retrieve the store ID, city and country for each store

SELECT s.store_id, c.city, co.country

FROM store s
INNER JOIN address a
ON s.address_id = a.address_id
INNER JOIN city c
ON a.city_id = c.city_id
JOIN country co ON c.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars

SELECT s.store_id as 'store_id', sum(amount) as 'total_revenue'

FROM store s
INNER JOIN staff st
ON s.store_id = st.store_id
INNER JOIN payment p
on st.staff_id = p.staff_id
group by store_id; 

-- 4. Determine the average running time of films for each category
 
 SELECT c.name as 'category', AVG(f.length) as 'average_time'  
 
 FROM film f
 INNER JOIN film_category fc
 ON f.film_id = fc.film_id
 INNER JOIN category c
 ON c.category_id = fc.category_id
 group by category; 

-- 5. Identify the film categories with the longest average running time.

 SELECT c.name as 'category', AVG(f.length) as 'average_time'  
 
 FROM film f
 INNER JOIN film_category fc
 ON f.film_id = fc.film_id
 INNER JOIN category c
 ON c.category_id = fc.category_id
 group by category
 ORDER BY average_time DESC
 LIMIT 1; 
 
 -- 6. Display the top 10 most frequently rented movies in descending order.
 
SELECT f.title as 'title', count(r.rental_id) as 'total_rental'

FROM rental r
INNER JOIN inventory i
ON r.inventory_id = i.inventory_id
INNER JOIN film f
ON f.film_id = i.film_id
GROUP BY title
ORDER BY total_rental DESC
LIMIT 10; 

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, 
		i.store_id,
		COUNT(CASE WHEN r.rental_id IS NULL THEN i.inventory_id END) AS 'AvailableCopies'

FROM film f
INNER JOIN inventory  i
ON f.film_id = i.film_id
LEFT JOIN rental r
ON r.inventory_id = i.inventory_id AND r.return_date is NULL 
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1
GROUP BY f.title, i.store_id;

-- you can rent this film in the first store

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT f.title,
		CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'Not in Inventory'
        WHEN COUNT(i.inventory_id) - COUNT(r.rental_id) >0 THEN 'Avaliable'
        ELSE 'Not available'
	END AS Status
        
FROM film f
LEFT JOIN inventory i
ON f.film_id = i.film_id
LEFT JOIN rental r
ON r.inventory_id = i.inventory_id AND r.return_date IS NULL
GROUP BY f.title
ORDER BY f.title;